# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

variables:
  SERVICE:
    value: "all"
    options:
      - "all"
      - "api"
      - "web"
    description: "Service to be deployed"
  SERVER_ENV:
    value: "development"
    options:
      - "development"
      - "uat"
      - "production"
    description: "Environment of service to be deployed"

  RUNNER: main-runner-003
  RUNNER_FE: main-runner-003-jumbo

  DOCKERFILE_PATH_API: "deployments/api/Dockerfile"
  DEPLOYMENT_PATH_API: "deployments/api/deployment.yaml"
  SERVICE_PATH_API: "deployments/api/service.yaml"

  DOCKERFILE_PATH_WEB: "deployments/web/Dockerfile"
  DEPLOYMENT_PATH_WEB: "deployments/web/deployment.yaml"
  SERVICE_PATH_WEB: "deployments/web/service.yaml"

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $SERVER_ENV == "development"'
      variables:
        TARGET_NAMESPACE: "petros-website"
        KUBE_CONTEXT: $KUBE_CONTEXT_DEV
        REGISTRY_POSTFIX: "-dev"
        SERVER_URL: ""
        VERSION: $CI_PIPELINE_ID
        VAULT_HOST: $VAULT_HOST_PUBLIC_DEFAULT
        VAULT_TOKEN: $VAULT_TOKEN_DEV
        ENVCONSUL_SECRET_PATH_API: "petros-website/corporate-website-minerva-api"
        ENVCONSUL_SECRET_PATH_WEB: "petros-website/corporate-website-minerva-web"
    - if: '$CI_PIPELINE_SOURCE == "web" && $SERVER_ENV == "uat"'
      variables:
        TARGET_NAMESPACE: "petros-website-uat"
        KUBE_CONTEXT: $KUBE_CONTEXT_PROD
        REGISTRY_POSTFIX: "-uat"
        SERVER_URL: "https://petros-solution.todcoe.com/minerva"
        VERSION: $CI_PIPELINE_ID
        VAULT_HOST: $VAULT_HOST_PROD
        VAULT_TOKEN: $VAULT_TOKEN_PROD
        ENVCONSUL_SECRET_PATH_API: "petros-website/corporate-website-minerva-api-uat"
        ENVCONSUL_SECRET_PATH_WEB: "petros-website/corporate-website-minerva-web-uat"
    - if: '$CI_PIPELINE_SOURCE == "web" && $SERVER_ENV == "production"'
      variables:
        TARGET_NAMESPACE: "petros-website"
        KUBE_CONTEXT: $KUBE_CONTEXT_PROD
        REGISTRY_POSTFIX: ""
        SERVER_URL: "https://petros-solutions.com/minerva"
        VERSION: $CI_PIPELINE_ID
        VAULT_HOST: $VAULT_HOST_PROD
        VAULT_TOKEN: $VAULT_TOKEN_PROD
        ENVCONSUL_SECRET_PATH_API: "petros-website/corporate-website-minerva-api"
        ENVCONSUL_SECRET_PATH_WEB: "petros-website/corporate-website-minerva-web"
    - if: '$CI_PIPELINE_SOURCE == "push"'
      variables:
        KUBE_CONTEXT: $KUBE_CONTEXT_DEV
        SERVICE: scan

stages:
  - build-image
  - deploy

scan-trivy:
  stage: build-image
  rules:
    - if: '( $SERVICE == "scan" )'
  tags:
    - $RUNNER
  image:
    name: aquasec/trivy
    entrypoint: [""]
  script:
    - trivy fs --scanners vuln,secret,config,license .
  when: manual

scan-golangci-lint:
  stage: build-image
  rules:
    - if: '( $SERVICE == "scan" )'
  tags:
    - $RUNNER
  image:
    name: golangci/golangci-lint:latest-alpine
    entrypoint: [""]
  script:
    - golangci-lint run -v
  when: manual

a-notification:
  stage: build-image
  rules:
    - if: '( $SERVICE != "scan" )'
  tags:
    - $RUNNER
  script:
    - echo "Runner started by ${GITLAB_USER_EMAIL}"
    - echo "on commit ${CI_COMMIT_SHA}"
    - echo "on branch ${CI_COMMIT_REF_NAME}"
    - echo "on tag ${CI_COMMIT_TAG}"
    - echo "on SERVICE ${SERVICE}"
    - echo "on SERVER_ENV ${SERVER_ENV}"

# ===============================================================================================================================================
# Build Image
# ===============================================================================================================================================

# Template
.build-image-base:
  stage: build-image
  tags:
    - $RUNNER
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - export IMAGE_DESTINATION="${ACR_PTRO_REGISTRY}/${CI_PROJECT_PATH}${REGISTRY_POSTFIX}:${VERSION}-${TARGET_SERVICE}"
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${ACR_PTRO_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${ACR_PTRO_REGISTRY_USER}" "${ACR_PTRO_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --cache=true
      --context="${CI_PROJECT_DIR}"
      --dockerfile="${CI_PROJECT_DIR}/${DOCKERFILE_PATH}"
      --destination="${IMAGE_DESTINATION}"
      --build-arg=VAULT_HOST="${VAULT_HOST}"
      --build-arg=VAULT_TOKEN="${VAULT_TOKEN}"
      --build-arg=ENVCONSUL_SECRET_PATH="${ENVCONSUL_SECRET_PATH}"
      --build-arg=CI_JOB_TOKEN="${CI_JOB_TOKEN}"

# Jobs
build-api:
  extends: .build-image-base
  rules:
    - if: '( $SERVICE == "all" || $SERVICE == "api" )'
  variables:
    DOCKERFILE_PATH: $DOCKERFILE_PATH_API
    TARGET_SERVICE: "api"
    ENVCONSUL_SECRET_PATH: $ENVCONSUL_SECRET_PATH_API

build-web:
  extends: .build-image-base
  tags:
    - $RUNNER_FE
  rules:
    - if: '( $SERVICE == "all" || $SERVICE == "web" )'
  variables:
    DOCKERFILE_PATH: $DOCKERFILE_PATH_WEB
    TARGET_SERVICE: "web"
    ENVCONSUL_SECRET_PATH: $ENVCONSUL_SECRET_PATH_WEB

# ===============================================================================================================================================
# Deploy
# ===============================================================================================================================================

# Template
.deploy-base:
  stage: deploy
  tags:
    - $RUNNER
  image:
    name: ${ACR_PTRO_REGISTRY}/kubectl:1.23.1-debian-10-r26
    entrypoint: [""]
  script:
    - kubectl config use-context ${KUBE_CONTEXT}
    - envsubst < ${DEPLOYMENT_PATH} | kubectl apply -f -
    - >
      if [ "$SERVICE_PATH" != "" ]; then
        envsubst < ${SERVICE_PATH} | kubectl apply -f -
      fi
  environment:
    name: $SERVER_ENV
    url: $SERVER_URL

# Jobs
deploy-api:
  extends: .deploy-base
  rules:
    - if: '( $SERVICE == "all" || $SERVICE == "api" )'
  variables:
    DEPLOYMENT_PATH: $DEPLOYMENT_PATH_API
    SERVICE_PATH: $SERVICE_PATH_API
    TARGET_SERVICE: "api"

deploy-web:
  extends: .deploy-base
  rules:
    - if: '( $SERVICE == "all" || $SERVICE == "web" )'
  variables:
    DEPLOYMENT_PATH: $DEPLOYMENT_PATH_WEB
    SERVICE_PATH: $SERVICE_PATH_WEB
    TARGET_SERVICE: "web"
